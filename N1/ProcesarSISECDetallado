// === FUNCIONES DE SISEC DETALLADO (MEJORADAS MULTIL√çNEA) ===

function extraerDatosSISECDetallado(documentoTexto) {
  Logger.log("\ud83d\udcc9 Iniciando extracci√≥n de datos detallados...");

  let lineas = documentoTexto.split("\n");
  let periodos = [];
  let patronActual = null;
  let fechaBajaGeneral = null;
  let movimientos = [];
  let vigente = false;

  let lineaAnterior1 = "";
  let lineaAnterior2 = "";

  for (let i = 0; i < lineas.length; i++) {
    let linea = lineas[i].trim();
    Logger.log("\ud83d\udd0e Analizando l√≠nea: " + linea);

    if (linea.startsWith("Nombre del patr√≥n")) {
      if (patronActual !== null) {
        let periodosPatron = procesarSISECDetallado(patronActual, movimientos, fechaBajaGeneral, vigente);
        periodos.push(...periodosPatron);
      }

      let posiblePatron = (i + 1 < lineas.length) ? lineas[i + 1].trim() : null;
      if (posiblePatron && posiblePatron !== "") {
        patronActual = posiblePatron;
        fechaBajaGeneral = null;
        movimientos = [];
        vigente = false;
        Logger.log("\ud83d\udcc9 Nuevo patr√≥n detectado: " + patronActual);
      } else {
        Logger.log("\u26a0\ufe0f No se detect√≥ un patr√≥n v√°lido despu√©s de 'Nombre del patr√≥n'");
        patronActual = null;
      }
      continue;
    }

    if (linea.startsWith("Fecha de baja")) {
      fechaBajaGeneral = (i + 1 < lineas.length) ? lineas[i + 1].trim() : null;
      if (fechaBajaGeneral && fechaBajaGeneral.toUpperCase() === "VIGENTE") {
        fechaBajaGeneral = obtenerUltimoDiaMes();
        vigente = true;
      }
    }

    const tipos = ["ALTA", "REINGRESO", "MODIFICACION DE SALARIO", "BAJA"];
    if (tipos.includes(lineaAnterior2.toUpperCase()) &&
        lineaAnterior1.match(/^\d{2}\/\d{2}\/\d{4}$/) &&
        linea.match(/^\$\s*[\d,.]+$/)) {

      if (!patronActual) {
        Logger.log("\u26a0\ufe0f Movimiento detectado sin patr√≥n. Ignorado.");
      } else {
        let tipo = lineaAnterior2.toUpperCase();
        let fecha = lineaAnterior1;
        let salario = parseFloat(linea.replace("$", "").replace(/,/g, "").trim());

        Logger.log(`\u2705 Movimiento detectado: ${tipo} - ${fecha} - ${salario}`);
        movimientos.push({ tipo, fecha, salario });
      }
    }

    lineaAnterior2 = lineaAnterior1;
    lineaAnterior1 = linea;
  }

  if (patronActual) {
    let periodosPatron = procesarSISECDetallado(patronActual, movimientos, fechaBajaGeneral, vigente);
    periodos.push(...periodosPatron);
  }

  // ‚úÖ Validaci√≥n para evitar errores con tipos inesperados
  periodos = periodos.filter(p => typeof p === "object" && typeof p.alta === "string" && p.alta.includes("/"));

  // ‚úÖ Ordenar periodos por fecha m√°s reciente
  periodos.sort((a, b) => new Date(b.alta.split("/").reverse().join("-")) - new Date(a.alta.split("/").reverse().join("-")));

  Logger.log("\ud83d\udcc9 Periodos extra√≠dos: " + JSON.stringify(periodos));
  return periodos;
}

function procesarSISECDetallado(patronActual, movimientos, fechaBajaGeneral, vigente) {
  let periodos = [];
  let fechaBajaFinal = fechaBajaGeneral;

  if (!fechaBajaFinal) {
    let bajaMovimiento = movimientos.find(mov => mov.tipo === "BAJA");
    if (bajaMovimiento) fechaBajaFinal = bajaMovimiento.fecha;
  }

  let movimientosValidos = movimientos.filter(mov => mov.tipo !== "BAJA");

  if (movimientosValidos.length === 0) {
    Logger.log("\u26a0\ufe0f No se encontraron movimientos v\u00e1lidos para " + patronActual);
    return [];
  }

  for (let i = 0; i < movimientosValidos.length; i++) {
    let fechaAlta = (i === 0) ? movimientosValidos[i].fecha : restarUnDia(movimientosValidos[i - 1].fecha);
    let salario = movimientosValidos[i].salario;
    let fechaBaja = (i === 0) ? fechaBajaFinal : restarUnDia(movimientosValidos[i - 1].fecha);

    periodos.push({
      patron: (i === 0) ? patronActual : "",
      alta: fechaAlta,
      baja: fechaBaja,
      salario: salario,
      detallado: true
    });
  }

  Logger.log("\ud83d\udccc Periodos generados para " + patronActual + ": " + JSON.stringify(periodos));
  return periodos;
}

function restarUnDia(fecha) {
  let partes = fecha.split("/");
  let dateObj = new Date(parseInt(partes[2]), parseInt(partes[1]) - 1, parseInt(partes[0]));
  dateObj.setDate(dateObj.getDate() - 1);

  let dia = ("0" + dateObj.getDate()).slice(-2);
  let mes = ("0" + (dateObj.getMonth() + 1)).slice(-2);
  let anio = dateObj.getFullYear();

  return `${dia}/${mes}/${anio}`;
}

function obtenerUltimoDiaMes() {
  let hoy = new Date();
  let ultimoDia = new Date(hoy.getFullYear(), hoy.getMonth() + 1, 0);
  return Utilities.formatDate(ultimoDia, Session.getScriptTimeZone(), "dd/MM/yyyy");
}
function validacionesFinales(hoja, fila, periodos) {
  Logger.log("üîé Validando datos finales...");
  
  // üöß Aqu√≠ en un futuro puedes validar si hay fechas de alta mayores a hoy, fechas invertidas, salarios an√≥malos, etc.
  // Por ahora solo devuelve FALSE para que siga el flujo
  
  return false; // ‚úÖ Todo en orden
}
// C√≥digo base para an√°lisis general del SISEC

function analizarDatosGeneralesSISEC(datosExtraidos, periodos) {
  const info = {};

  // 1. Subdelegaci√≥n
  const subNum = datosExtraidos.nss?.substring(0, 2);
  const subdelegacion = buscarSubdelegacion(subNum);
  info["üè¢ Subdelegaci√≥n"] = `[${subNum}] ${subdelegacion?.subdelegacion || 'Desconocida'}`;
  info["Direcci√≥n de subdelegaci√≥n"] = subdelegacion?.direccion || 'Direcci√≥n no disponible';

  // 2. A√±o de nacimiento
  const a√±oNacimiento = parseInt(datosExtraidos.curp?.substring(4, 6));
  const siglo = parseInt(datosExtraidos.curp?.substring(16, 17)) <= 9 ? 2000 : 1900;
  const nacimiento = siglo + a√±oNacimiento;
  info["üìÖ A√±o de nacimiento (CURP)"] = nacimiento;

  // 3. A√±o de afiliaci√≥n
  const afiliacion = parseInt(datosExtraidos.nss?.substring(2, 4)) + 1900;
  info["üÜî A√±o de afiliaci√≥n (por NSS)"] = afiliacion;

  // 4. Edad de afiliaci√≥n
  const edadAfiliacion = afiliacion - nacimiento;
  info["‚è≥ Edad de afiliaci√≥n al IMSS"] = edadAfiliacion;
  info["‚ö†Ô∏è Inconsistencia: Edad de afiliaci√≥n"] = edadAfiliacion >= 15 ? "‚úÖ Consistente (mayor de 15)" : "‚ùå Inconsistente (< 15 a√±os)";

  // 5. Patr√≥n ley 73
  const ley73 = periodos.find(p => new Date(p.alta.split("/").reverse().join("-")) < new Date("1997-07-01"));
  if (ley73) {
    info["üíº Patr√≥n que da derecho a Ley 73"] = `${ley73.patron} (${ley73.alta})`;
  }

  // 6. Gaps de cotizaci√≥n
  const gaps = calcularGapsCotizacion(periodos);
  info["üß© Gaps de cotizaci√≥n (> 1 a√±o)"] = gaps.map(g => `${g.inicio.getFullYear()} - ${g.fin.getFullYear()} (${g.fin.getFullYear() - g.inicio.getFullYear()} a√±os)`).join(", ");

  // 7. Salarios promedio
  const salarios = periodos.map(p => p.salario);
  const salariosUltimos5Anios = periodos.filter(p => new Date(p.alta.split("/").reverse().join("-")) >= restarAnios(new Date(), 5)).map(p => p.salario);
  info["üíµ Salario promedio hist√≥rico"] = promedio(salarios);
  info["üíµ Salario promedio √∫ltimos 5 a√±os"] = promedio(salariosUltimos5Anios);

  // 8. Patr√≥n vigente
  const vigente = periodos.find(p => p.baja === "VIGENTE");
  if (vigente) {
    info["üìÖ Patr√≥n activo actual"] = vigente.patron;
    info["üìÖ Alta del patr√≥n vigente"] = vigente.alta;
  }

  // 9. Fecha en que cumple 60 a√±os
  const cumple60 = new Date(nacimiento + 60, new Date().getMonth(), new Date().getDate());
  info["üéÇ Fecha en que cumple 60 a√±os"] = formatearFecha(cumple60);

  // 10. Meses sin ejercer derecho
  if (!vigente && periodos.length > 0) {
    const ultimoPeriodo = periodos[0];
    const fechaBaja = parseFecha(ultimoPeriodo.baja);
    const hoy = new Date();
    const meses = (hoy.getFullYear() - fechaBaja.getFullYear()) * 12 + (hoy.getMonth() - fechaBaja.getMonth());
    info["‚è∞ Meses sin ejercer derecho a pensi√≥n (Ley 73)"] = `${meses} meses`;
  }

  return { resumen: info, gapsDetalle: gaps };
}

function promedio(valores) {
  if (valores.length === 0) return "$0.00";
  const suma = valores.reduce((acc, v) => acc + v, 0);
  return `$${(suma / valores.length).toFixed(2)}`;
}

function restarAnios(fecha, anios) {
  return new Date(fecha.getFullYear() - anios, fecha.getMonth(), fecha.getDate());
}



function formatearFecha(date) {
  return Utilities.formatDate(date, Session.getScriptTimeZone(), "dd/MM/yyyy");
}

function parseFecha(fechaTexto) {
  if (!fechaTexto || typeof fechaTexto !== "string") return new Date();
  const partes = fechaTexto.split("/");
  return new Date(partes[2], partes[1] - 1, partes[0]);
}

function sumarUnDia(date) {
  const nueva = new Date(date);
  nueva.setDate(nueva.getDate() + 1);
  return nueva;
}

function restarUnDia(date) {
  const nueva = new Date(date);
  nueva.setDate(nueva.getDate() - 1);
  return nueva;
}
